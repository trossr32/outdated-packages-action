---
# yamllint disable rule:line-length
name: Outdated nuget/npm package checker
description: Check for outdated nuget and/or npm packages and comment on the PR with the results

branding:
  icon: 'message-circle'
  color: 'green'

inputs:
  # use dotnet outdated
  use-dotnet-outdated:
    description: Use dotnet outdated
    required: false
    default: 'false'

  # required for dotnet outdated
  dotnet-solution-or-project-path:
    description: Path of the dotnet solution or project file
    required: false
    default: ''

  # use npm outdated
  use-npm-outdated:
    description: Use npm outdated
    required: false
    default: 'false'

  # required for npm outdated
  npm-project-directory:
    description: Path of the npm project directory
    required: false
    default: '.'

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4

    # Validate action inputs
    - name: Validate action inputs
      shell: bash
      run: |
        echo "use-dotnet-outdated:              ${{ inputs.use-dotnet-outdated }}"
        echo "dotnet-solution-or-project-path:  ${{ inputs.dotnet-solution-or-project-path }}"
        echo "use-npm-outdated:                 ${{ inputs.use-npm-outdated }}"
        echo "npm-project-directory:            ${{ inputs.npm-project-directory }}"

        if ([[ "${{ inputs.use-dotnet-outdated }}" == 'true' ]] && [[ -z "${{ inputs.dotnet-solution-or-project-path }}" ]]); then
          echo "dotnet-solution-or-project-path is empty"; error=true;
        fi

        if ([[ "${{ inputs.npm-project-directory }}" == 'true' ]] && [[ -z "${{ inputs.npm-project-directory }}" ]]); then
          echo "npm-project-directory is empty"; error=true;
        fi

        if [ -n "${error}" ]; then
          echo "One or more inputs are invalid"
          exit 1
        fi

    # NPM outdated
    - name: NPM install
      if: ${{ inputs.use-npm-outdated == 'true' }}
      working-directory: ${{ inputs.npm-project-directory }}
      shell: bash
      run: npm install

    - name: NPM update check
      if: ${{ inputs.use-npm-outdated == 'true' }}
      uses: MeilCli/npm-update-check-action@v4 
      id: npm-outdated-check
      with:
        execute_directories: ${{ inputs.npm-project-directory }}
        output_text_style: short

    - name: Create npm outdated comment
      if: ${{ inputs.use-npm-outdated == 'true' }}
      id: npm-outdated-comment
      continue-on-error: true
      working-directory: ${{ inputs.npm-project-directory }}
      shell: bash
      run: |
        if [[ "${{ steps.npm-outdated-check.outputs.has_npm_update }}" = "false" ]]; then
            printf "## No outdated npm packages found :rocket:" >> npm_outdated.md
            exit 0
        else
            printf "${{ steps.npm-outdated-check.outputs.npm_update_text }}" >> npm_outdated.md
            echo ' ' | cat - npm_outdated.md > temp && mv temp npm_outdated.md
            echo '> Outdated npm packages found, update if possible. Run ```npm outdated``` in the terminal to view locally.' | cat - npm_outdated.md > temp && mv temp npm_outdated.md
            echo '> [!WARNING]' | cat - npm_outdated.md > temp && mv temp npm_outdated.md
            exit 0
        fi

    - name: NPM outdated PR comment
      if: ${{ inputs.use-npm-outdated == 'true' }}
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: "${{ inputs.npm-project-directory }}/npm_outdated.md"
        comment_tag: npm_outdated

    # Dotnet outdated
    - name: Restore packages
      if: ${{ inputs.use-dotnet-outdated == 'true' }}
      shell: bash
      run: dotnet restore ${{ inputs.dotnet-solution-or-project-path }}

    - name: Install dotnet outdated tool
      if: ${{ inputs.use-dotnet-outdated == 'true' }}
      shell: bash
      run: dotnet tool install --global dotnet-outdated-tool

    - name: Run outdated script
      if: ${{ inputs.use-dotnet-outdated == 'true' }}
      id: dotnet-outdated
      continue-on-error: true
      shell: bash
      run: |
        echo "dotnet outdated ${{ inputs.dotnet-solution-or-project-path }} -of Markdown -o outdated.md -ifs"

        OUTPUT=`dotnet outdated ${{ inputs.dotnet-solution-or-project-path }} -of Markdown -o outdated.md -ifs`
        echo "$OUTPUT"

        if [[ $OUTPUT =~ "No outdated dependencies" ]]; then
            printf "## No outdated nuget packages found :rocket:" >> outdated.md
        elif [[ $OUTPUT =~ "Errors occurred" ]]; then
            echo '> Failure when checking for outdated nuget packages' | cat - outdated.md > temp && mv temp outdated.md
            echo '> [!CAUTION]' | cat - outdated.md > temp && mv temp outdated.md
        else
            echo '> Outdated nuget packages found, update if possible' | cat - outdated.md > temp && mv temp outdated.md
            echo '> [!WARNING]' | cat - outdated.md > temp && mv temp outdated.md
        fi

        # echo "$(<outdated.md )"

    - name: Dotnet outdated PR comment
      if: ${{ inputs.use-dotnet-outdated == 'true' }}
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: "outdated.md"
        comment_tag: outdated